[{"title":"Introduction","description":"Get started with the Acorn Email Framework","keywords":"email, introduction, start","body":"\nGet started with Acorn\n\nAcorn is a golden ratio typography grid, responsive email framework made for email developers. With a focus on clean code, reusability, and utility classes, it is lightweight, easy to learn, and has solid email client compatibility.\n\nStarter Layout\n\nAcorn comes with a layout file that you can use as the boilerplate for any HTML email you build with it.\nThis file includes all the necessary CSS, tags, and attributes that are required for Acorn to render as intended.\n\n    Acorn Email Framework\n\n        96\n\n      table {border-collapse: collapse;}\n      .spacer,.divider {mso-line-height-rule: exactly;}\n      td,th,div,p,a {font-size: 16px; line-height: 25px;}\n      td,th,div,p,a,h1,h2,h3,h4,h5,h6 {font-family:\"Segoe UI\",Helvetica,Arial,sans-serif;}\n\n      /* Framework CSS - Removed for demo purposes */\n\nIn addition to the minimum viable CSS, the starter template also includes all mobile helper classes by default. They're included to help you quickly get started, bu","path":"/acorn/introduction"},{"title":"Contents","description":"Discover what's included in the Acorn Email Framework","keywords":"components, contents, examples","body":"\nDiscover what's included in Acorn\n\nAcorn comes with a starter template, several components, plus grid and a few layout examples.\n\nFolder structure\n\nClone the repo or download and unzip the compressed folder, and you'll see this structure:\n\n@filetree\ncomponents\n    accordion\n    alerts\n    buttons\n    coupon\n    divider\n    feature-columns\n    labels\n    navigation\n    pricing-tables\n    spacer\n    stats\n    testimonials\n    timeline\nexamples\ngrid\nlayouts\n@endfiletree\n\nComponents\n\nComponents are pre-built structures that you can drop into your projects right away. We have included 10+ components, ranging from the common spacer or divider, to interactive ones such as hamburger menus or accordions.\n\nExamples\n\nAcorn comes with examples that show how easy it is to use the framework in order to build structures for common scenarios, like centering a single column with very little code or defining a custom stacking order for mobile-only.\n\nGrid\n\nWe have included grid examples that cover all p","path":"/acorn/contents"},{"title":"Compatibility","description":"See which email clients the Acorn Email Framework is compatible with","keywords":"compatibility, rendering, clients","body":"\nList of email clients that Acorn is compatible with\n\nAcorn has been (and is regularly) tested to render well in all major email clients.\n\nWe use both Email on Acid and Litmus to test. The following table shows all major email clients that Acorn supports and is compatible with:\n\n            Email Client or Operating System\n            Compatible\n\n                Android\n\n            Gmail Android\n            ✔ 1\n\n            Outlook Android\n            ✔\n\n                iOS (10+)\n\n            iPhone\n            ✔\n\n            iPad\n            ✔\n\n            Gmail\n            ✔ 1\n\n            Outlook\n            ✔\n\n            Google Inbox\n            ✔ 1\n\n                macOS\n\n            Apple Mail\n            ✔\n\n            Outlook 2011\n            ✔\n\n            Outlook 2016\n            ✔\n\n                Outlook (Windows)\n\n            Outlook 2003\n            ✔\n\n            Outlook 2007\n            ✔\n\n            Outlook 2010\n            ✔\n\n            Outlook 2011\n            ✔\n","path":"/acorn/compatibility"},{"title":"Accessibility","description":"Accessibility features in the Acorn Email Framework","keywords":"components, contents, examples","body":"\nAn overview of Acorn's email accessibility features\n\nAcorn comes with some accessibility features out of the box, to help you create emails that perform well when read with assistive technologies. When adding your own markup, please always do so with accessibility in mind.\n\nLanguage\n\nAcorn sets the lang=\"\" HTML attribute to en by default. This helps screen reader software use the correct pronunciation. When coding emails in a language other than English, make sure to update this attribute (language code reference).\n\nDocument Title\n\nThe `` tag is included in order to give screen reader users some context. It also helps when viewing the email in a browser (i.e. your email's online version), by setting the title on the browser's tab.\n\nCharacter Encoding\n\nCharacter encoding is set to UTF-8 by default. This prevents breaking reading patterns by ensuring proper character rendering, both on-screen and with screen readers.\n\nTypography\n\nAcorn uses the golden ratio for typography, in order to h","path":"/acorn/accessibility"},{"title":"Layout Overview","description":"Overview of the base layout components in the Acorn Email Framework","keywords":"layout, base, wrapper, container","body":"\nFamiliar components for building email layouts\n\nThe layout structure in Acorn is built with familiar frontend framework concepts, like wrappers, containers, and columns. All these components use HTML tables for markup, in order to provide consistent rendering across email clients.\n\nWrapper\n\nThe Wrapper in Acorn is a full width table that houses the main container, centering it and allowing for defining a body background colour. It's also used to add some space around the container, so that it doesn't stick to the edges of the email client's viewport:\n\n        ...\n\nBy default, Acorn uses 16px of padding on the wrapper table, through the use of the cellpadding=\"16\" attribute. This value is enough to make the container stand out more while making sure the responsive view doesn't lose too much space. 16px is also half of the container's apparent padding →\n\n  Hack alert\n  The u ~ div .wrapper {min-width: 100vw;} CSS is a temporary hack that forces the Gmail iOS app to expand its viewport p","path":"/acorn/layout"},{"title":"Grid","description":"Responsive email grid system","keywords":"grid, columns, rows, gutters, offsets","body":"\nResponsive, 4 column typography grid for emails\n\nAcorn's four-column responsive grid system gives you the flexibility to create layouts of all shapes and sizes, for both desktop and mobile. Create solid desktop emails and adapt them to specific mobile requirements with our utility classes.\n\n {#grid-image}\n\nThe grey columns in the image above show available content area width.\n\nYou could remove the column gutters and have more space - here's the same grid depicting column widths with gutters included:\n\nRow\n\nRows are 100% wide, center-aligned stackable tables that go inside a container and house your column tables. Their maximum width is constrained by the container, so we can take advantage of that and use width=\"100%\" on them. This way, we don't need to worry about resetting widths through CSS when nesting rows:\n\n                Add your content here\n\n  Background Colour\n  Row tables don't have one, they inherit the Container's background colour in order to avoid a box model bug in so","path":"/acorn/grid"},{"title":"CSS Reset","description":"Email client rendering CSS style resets","keywords":"reset, normalization, default","body":"\nGeneric and email client-specific rendering defaults\n\nBecause email clients render HTML emails in so many different ways, Acorn employs a handful of resets that aim to achieve an acceptable normalization level, to help you create more consistent layouts across the board.\n\nGeneric Resets\n\nThese apply to all supported email clients.\n\nTables\n\nCell content is set to align vertically to the top, but can be overridden with inline CSS\nBeautiful, golden ratio typography with native font stack is also set as a default for cell content\nAdjacent cells share borders in Outlook, as Acorn defines border-collapse: collapse; for all tables.\n\nImages\n\nThe image reset ensures no borders are added, avoids unwanted gaps below, and overrides the default content line-height. On mobile, in order to prevent blown-up layouts caused by images that are not using the fluid retina technique, they are reset to be 100% wide. Of course, fluid retina overrides this, if used.\n\nGlobal image reset (desktop + mobile):\n\nim","path":"/acorn/css-reset"},{"title":"Typography","description":"HTML email typography with system and web fonts","keywords":"fonts, typography, type","body":"\nBeautiful typography, extendable with web fonts\n\nAcorn uses the golden ratio for both desktop and mobile, in order to deliver content width-tailored typography that looks great and is easy to read. Just like you're used to from reading a book.\n\nGolden ratio\n\nFont size and line height are based on the maximum content width achievable with one column: 600px\n\nFollowing the golden ratio formula for typography, we reset body text to a 16px font size, with a 25px line height. For mobile devices, the line height is reduced to 23px.\n\nNative Font Stack\n\nAcorn uses the same beautiful system font stack that you're used to from Bootstrap 4. Even in the absence of web fonts support, this helps create beautiful emails across the board, by taking advantage of the operating system's fonts.\n\nIn order to avoid unnecessary font-family automatic CSS inlining with most ESPs, Acorn takes advantage of conditional comments for Outlook, as well as @media queries, to cleverly define fonts so that your HTML is ","path":"/acorn/typography"},{"title":"Images","description":"Responsive and retina images for HTML email","keywords":"image, retina","body":"\nSharp, responsive images that render well on both mobile and desktop\n\nSince pretty much all of today's mobile devices have high pixel density screens, you need to use \"retina\" images for your media to look sharp on any screen. This is done by using images that are usually twice (or even more!) the intended display size.\n\nHowever, some email clients - specifically Outlook for desktop - don't like images that are larger than their container, and will blow up your design if you don't use a fixed width.\n\nAcorn uses the fluid retina image technique, so that your images display well across the board, even in Outlook.\n\nFluid Retina Images {#fluid-retina}\n\nNot only does this ensure proper image sizing in all email clients, but your mobile images will not expand beyond their natural width.\n\nSimply use the width=\"\" attribute on an `` tag, to set a fixed width that is half the natural image width. This is the intended display width, and will work in all email clients, including Outlook.\n\nOn mobi","path":"/acorn/images"},{"title":"Background Images","description":"Responsive and retina images for HTML email","keywords":"background, image, VML","body":"\nBackground images that work everywhere, including Outlook\n\nBackground images are a hard thing to get right in emails, mainly because of Microsoft's Word-based rendering engine for Outlook and Windows 10 Mail, which does not support CSS background images. Acorn makes it a breeze to get them working across the board.\n\nCSS Background Images {#with-css}\n\nWith the exception of Outlook and Windows Mail, the majority of email clients supports CSS background images. In addition to this inline style, we also include the background=\"\" attribute, for Lotus Notes and a couple international clients (of course, if you don't need to support the latter ones, you can remove this).\n\nWe simply add these on the Column cell inside the row table:\n\n        Preview\n        Code\n\n                @fileContents('source/img/icons/mobile.svg')\n                @fileContents('source/img/icons/desktop.svg')\n\n      &zwnj;\n      Overlayed Text\n      CAN BE ANY HTML YOU NEED\n      &zwnj;\n\nMake sure you also specify a f","path":"/acorn/background-images"},{"title":"Alignment Utilities","description":"Utility classes for custom element alignment on mobile","keywords":"utility, align, float","body":"\nCustom align elements on mobile\n\nIt often happens that you need to align elements differently for mobile in your emails. For example, maybe you have a left-aligned logo image that you want centered on mobile. Acorn's alignment responsive utilities make it easy to do so.\n\nThe following classes are available inside Acorn's @media query:\n\n.align-sm-center {\n  display: table!important;\n  float: none;\n  margin-left: auto!important;\n  margin-right: auto!important;\n}\n.align-sm-left {float: left;}\n.align-sm-right {float: right;}\nYou can add them to any element you need aligned differently on mobile. Keep in mind that, depending on your layout, the left/right alignment classes might cause issues, as they are using float, which takes the element out of the normal flow.\n\nCheck out the Navigation component: the logo image and the menu table are using the align-sm-center utility class.\n","path":"/acorn/alignment"},{"title":"Spacing Utilities","description":"Utilities for custom spacing on mobile","keywords":"utility, space, height","body":"\nUtilities for custom mobile email spacing\n\nAcorn includes padding-based responsive utility classes for fine-tuned control over spacing on mobile. Following Bootstrap 4 naming conventions, the classes are named using the format p{sides}-sm-{size}:\n\np stands for 'padding', use as-is.\n\n{sides} is one of:\n\nt - for classes that set padding-top\nr - for classes that set padding-right\nb - for classes that set padding-bottom\nl - for classes that set padding-left\nx - for classes that set both padding-left and padding-right\ny - for classes that set both padding-top and padding-bottom\nblank - for classes that set padding on all 4 sides of the element\n\n{size} is one of:\n\n0 - for classes that eliminate padding by setting it to 0\n8 - for classes that set padding to one fourth of container apparent padding (8px default)\n16 - for classes that set padding equal to half of container apparent padding (16px default)\n24 - for classes that set padding equal to half of container apparent padding (24px defaul","path":"/acorn/spacing"},{"title":"Display Utilities","description":"Utilities for showing and hiding elements in responsive emails","keywords":"utility, display, hide, show","body":"\nHide and Seek, if you're an #emailgeek\n\nAcorn includes responsive utilities that make it easy to show or hide elements on mobile. Use these classes on any elements you want hidden in your email on mobile:\n\n.show-sm {\n  display: inherit!important;\n  font-size: inherit!important;\n  line-height: inherit!important;\n  max-height: none!important;\n}\n.hide-sm {display: none!important;}\n\nYou can add them to any element you need aligned differently on mobile. Keep in mind that, depending on your layout, the left/right alignment classes might cause issues, as they are using float, which takes the element out of the normal flow.\n\nHiding On Desktop\n\nHiding email content from desktop email clients is tricky. Besides inconsistent support for display: none; we also have to put up with Outlook, which needs special attention as always.\n\nstyle=\"display: none; font-size: 0; line-height: 0;\" is enough to hide content in the majority of email clients. When adding the show-sm class, all three properties are","path":"/acorn/display"},{"title":"Text Utilities","description":"Utilities for custom text alignment in responsive emails","keywords":"utility, text, align","body":"\nCustom text alignment on mobile\n\nAcorn includes three text alignment responsive utilities, for those situations where you want text to align differently on mobile.\n\nThe following classes are available inside Acorn's @media query:\n\n.text-sm-center {text-align: center!important;}\n.text-sm-left {text-align: left!important;}\n.text-sm-right {text-align: right!important;}\n\nDo note that text alignment will not be inherited by nested cells - you will need to add the class on them, instead of the parent.\n","path":"/acorn/text"},{"title":"Reverse Stack","description":"Show email content in a different order on mobile","keywords":"reverse, stack, switch","body":"\nCustom stacking order for columns on mobile\n\nWith email on mobile, you sometimes need to reverse the order in which stacked columns appear. You may even need to set a custom stacking order for layouts with 3+ columns. Acorn comes with pre-built layout examples that will help you achieve this.\n\nWe have included two examples:\n\nReverse a 2-column layout\nCustom stacking order for a 3-column layout\n\nReverse a 2-column layout {#2-col}\n\nIt's often the case when you have text on the left and an image on the right. That's fine for desktop, since it's visible right away. But wouldn't it be nice if that image were shown first, on mobile devices?\n\nStep by step:\n\nAdd the full-width-sm class to the `` tag that contains the columns\nUse the stack-sm-last class on the first column, and stack-sm-first on the last column\nFinally, add the px-sm responsive spacing utility class on the first `` in your Row table\n\n        Preview\n        Code\n\n                @fileContents('source/img/icons/mobile.svg')\n   ","path":"/acorn/reverse-stack"}]